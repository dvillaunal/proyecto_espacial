df <- cbind(datos, x1,x2,x3)
df <- data.frame(df)
colnames(df)<-c("X","Y", "Temp min", "Temp max", "elev")
geo_temp.max <- as.geodata(df, coords = 1:2, data.col = 4, borders=TRUE)
geo_temp.max$borderland<- borderland
datos.sp <- df
coordinates(datos.sp) <- ~X+Y
plot(geo_temp.max, lowess=TRUE)
# Prueba Visual de Normalidad
qqnorm(df$`Temp max`)
qqline(df$`Temp max`)
shapiro.test(df$`Temp max`)
# Chunk 12
distancia1 <- dist(df[,1:2], diag=TRUE, upper=TRUE)
dif.temp1 <- dist(df[,4], diag=TRUE, upper=TRUE)^2
distancia2 <- dist(df2[,1:2], diag=TRUE, upper=TRUE)
dif.temp2 <- dist(df2[,4], diag=TRUE, upper=TRUE)^2
# Chunk 13
par(mfrow = c(1,2))
# (2019-03-10) [Normal]
plot(x = datosmatriz1$distancia1, y = datosmatriz1$dif.prof,
main = "2019-03-10 (Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia1, data = datosmatriz1), lwd = 2,
col = "red")
# (2019-01-10) [NO Normal]
plot(x = datosmatriz2$distancia2, y = datosmatriz2$dif.prof,
main = "2019-01-10 (No Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia2, data = datosmatriz2), lwd = 2,
col = "red")
# Chunk 14
mantel(distancia1, dif.temp1, na.rm = T)
# Chunk 15
mantel.rtest(distancia1, dif.temp1, nrepet=999)
mantel(distancia2, dif.temp2)
mantel(distancia2, dif.temp2)
mantel.rtest(distancia2, dif.temp2)
mantel(distancia2, dif.temp2)
mantel.rtest(distancia2, dif.temp2)
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2; dm
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2; dm
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste con regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste con regla empírica")
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2; dm
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma con ajuste\ncon regla empírica")
bin1 <- variog(geo_temp.max,option="bin")
bin2 <- variog(geo_temp.max,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste con regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste con regla empírica")
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2; dm
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste\ncon regla empírica")
bin1 <- variog(geo_temp.max,option="bin")
bin2 <- variog(geo_temp.max,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste\ncon regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste\ncon regla empírica")
library(sm)
install.packages("sm")
library(geoR); library(gstat) ;library(sf);library(raster)
library(rgdal)
library(vegan)
library(ade4)
library(GADMTools)
library(readxl)
library(tidyverse)
require(magrittr)
library(tmaptools) # Geocodificación y visualización
library(tidygeocoder) # Geocodificación
library(leaflet) # Visualización
library(easyGgplot2)
library(sm)
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent")
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,80))
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 0.03)
ini.vals1 <- c(17.79,0.7)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 0.03)
ini.vals1 <- c(17.79,0.7)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 0.03)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern)
require(gstat)
require(MASS)
eyefit(bin1)
eyefit(bin1) # exponencial siga 17.34 phi 1.48 tausq 2.17 range 4.4336
eyefit(bin1)
plot(geo_temp.max2, lowess=TRUE, trend = "2nd")
shapiro.test(df2$`Temp max`)
qqnorm(df$`Temp max`)
qqline(df$`Temp max`)
shapiro.test(df$`Temp max`)
qqnorm(df$`Temp max`)
qqline(df$`Temp max`)
shapiro.test(df$`Temp max`)
distancia1 <- dist(df[,1:2], diag=TRUE, upper=TRUE)
dif.temp1 <- dist(df[,4], diag=TRUE, upper=TRUE)^2
distancia2 <- dist(df2[,1:2], diag=TRUE, upper=TRUE)
dif.temp2 <- dist(df2[,4], diag=TRUE, upper=TRUE)^2
datosmatriz1 <- data.frame(dif.prof=dif.temp1[lower.tri(dif.temp1)],
distancia1=distancia1[lower.tri(distancia1)])
datosmatriz2 <- data.frame(dif.prof=dif.temp2[lower.tri(dif.temp2)],
distancia2=distancia2[lower.tri(distancia2)])
par(mfrow = c(1,2))
# (2019-03-10) [Normal]
plot(x = datosmatriz1$dif.prof, y = datosmatriz1$dif.prof,
main = "2019-03-10 (Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia1, data = datosmatriz1), lwd = 2,
col = "red")
# (2019-01-10) [NO Normal]
plot(x = datosmatriz2$distancia2, y = datosmatriz2$dif.prof,
main = "2019-01-10 (No Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia2, data = datosmatriz2), lwd = 2,
col = "red")
datosmatriz1
plot(dif.prof~distancia1, data = datosmatriz1)
plot(x = datosmatriz1$dif.prof, y = datosmatriz1$dif.prof,
main = "2019-03-10 (Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
par(mfrow = c(1,1))
plot(x = datosmatriz1$dif.prof, y = datosmatriz1$dif.prof,
main = "2019-03-10 (Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
# (2019-03-10) [Normal]
plot(x = datosmatriz1$distancia1, y = datosmatriz1$dif.prof,
main = "2019-03-10 (Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
datosmatriz1 <- data.frame(dif.prof=dif.temp1[lower.tri(dif.temp1)],
distancia1=distancia1[lower.tri(distancia1)])
datosmatriz2 <- data.frame(dif.prof=dif.temp2[lower.tri(dif.temp2)],
distancia2=distancia2[lower.tri(distancia2)])
par(mfrow = c(1,2))
# (2019-03-10) [Normal]
plot(x = datosmatriz1$distancia1, y = datosmatriz1$dif.prof,
main = "2019-03-10 (Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia1, data = datosmatriz1), lwd = 2,
col = "red")
# (2019-01-10) [NO Normal]
plot(x = datosmatriz2$distancia2, y = datosmatriz2$dif.prof,
main = "2019-01-10 (No Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia2, data = datosmatriz2), lwd = 2,
col = "red")
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2; dm
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste\ncon regla empírica")
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste\ncon regla empírica")
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste\ncon regla empírica")
bin1 <- variog(geo_temp.max,option="bin")
bin2 <- variog(geo_temp.max,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste\ncon regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste\ncon regla empírica")
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
bin1 <- variog(geo_temp.max,option="bin")
bin2 <- variog(geo_temp.max,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste\ncon regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste\ncon regla empírica")
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
par(mfrow = c(1,1))
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
par(mfrow = c(1,1))
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
dm <- distancia[2]/2; dm
knitr::purl("presentacion_datos.qmd", "temp.R")
head(dt0)
bin1 <- variog(geo_temp.max,option="bin")
bin2 <- variog(geo_temp.max,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste\ncon regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste\ncon regla empírica")
bin1
ini.vals1 <- c(16.201,0.531)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 0.03)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern)
par(mfrow= c(1,1))
ini.vals1 <- c(16.201,0.531)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 0.03)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern)
par(mfrow = c(1,1))
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
vgm <- fit.variogram(bin2 ~ 1, vgm("Mat", psill = 1, range = 10, nugget = 0.1))
# create variogram object
v <- variogram(bin2 ~ 1)
# create variogram object
v <- variogram(bin2 ~ 1, data = datos.sp@data)
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste\ncon regla empírica")
# create variogram object
v <- variogram(bin2 ~ 1)
bin2
geo_temp.max
geo_temp.max$data
dt
variogram(tmax ~ 1, data = dt)
datos
data
View(df)
# create variogram object
v <- variogram(`Temp max` ~ 1, data = df)
bin1 <- variog(geo_temp.max,option="bin")
bin2 <- variog(geo_temp.max,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste\ncon regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste\ncon regla empírica")
bin2
?variogram
data(meuse)
meuse %>% str()
require(janitor)
df %>% clean_names() %>% names()
df %<>% clean_names()
variogram(tem_max ~ 1, data = df)
variogram(temp_max ~ 1, data = df)
# create variogram object
variogram(log(zinc)~1, meuse)
# create variogram object
variogram(log(zinc)~1, data =meuse)
variogram(log(zinc)~1, data =meuse)
variogram(temp_max ~ 1, data = df)
df %>% head()
df$temp_max <- as.numeric(df$temp_max)
# create variogram object
v <- variogram(temp_max ~ 1, data = df)
library(sp)
# crear un objeto SpatialPointsDataFrame a partir de df
coordinates(df) <- c("x", "y")
# definir la proyección (en este caso, la misma que la de latitud/longitud)
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
# calcular el variograma
v <- variogram(temp_max ~ 1, data = df)
# graficar el variograma
plot(v)
# fit variogram model
vgm <- fit.variogram(v, vgm("Mat", psill = 1, range = 10, nugget = 0.1))
# Extraer los parámetros del modelo ajustado
ini.vals1 <- c(fit$psill, fit$range)
# Extraer los parámetros del modelo ajustado
ini.vals1 <- c(vgm$psill, vgm$range)
ini.vals1
gm$psill
vgm$psill
vgm$range
ini.vals1
# Extraer los parámetros del modelo ajustado
ini.vals1 <- c(vgm$psill, vgm$range)
ini.vals1
# Extraer los parámetros del modelo ajustado
ini.vals1 <- c(psill = vgm$psill, range = vgm$range)
ini.vals1
# crear un objeto SpatialPointsDataFrame a partir de df
coordinates(df) <- c("x", "y")
# definir la proyección (en este caso, la misma que la de latitud/longitud)
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
df %<>% clean_names()
df$temp_max <- as.numeric(df$temp_max)
# crear un objeto SpatialPointsDataFrame a partir de df
coordinates(df) <- c("x", "y")
# definir la proyección (en este caso, la misma que la de latitud/longitud)
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
# calcular el variograma
v <- variogram(temp_max ~ 1, data = df)
# fit variogram model
vgm <- fit.variogram(v, vgm("Mat", psill = 1, range = 10, nugget = 0.1))
# Extraer los parámetros del modelo ajustado
ini.vals1 <- c(psill = vgm$psill, range = vgm$range)
fit_matern <- variofit(vario = v, cov.model = "matern", fix.nugget = FALSE,
weights = "npairs", min.method="optim", nugget = 0.03, cov.pars = ini.vals1)
ini.vals1
v_geoR <- as.georVariogram(v)
variog(v)
# Chunk 1
library(geoR); library(gstat) ;library(sf);library(raster)
library(rgdal)
library(vegan)
library(ade4)
library(GADMTools)
library(readxl)
library(tidyverse)
require(janitor)
require(magrittr)
library(tmaptools) # Geocodificación y visualización
library(tidygeocoder) # Geocodificación
library(leaflet) # Visualización
library(sm)
require(gstat)
require(MASS)
# Chunk 2
municipios<-gadm_sf_loadCountries(c("COL"), level=2, basefile="./")
municipios$sf %>% head()
# Chunk 3
# Municipios de Estudio dentro de la región:
Antioquia <- gadm_subset(municipios, level=1,
regions=("Antioquia"))
gadm_plot(Antioquia, title = "Antioquia (División Politíca)") %>%
gadm_showNorth("tl") %>% gadm_showScale('bl')
# Chunk 4
borderland <- st_coordinates(Antioquia$sf)
borderland <- as.data.frame(borderland[,1:2])
# Chunk 5
dt0 <- read_csv("temperature.csv")
head(dt0)
# Chunk 6
dt2 <- dt0 %>% filter(date == "2019-01-10") %>% na.omit()
# Chunk 7
# Conversión de coordenadas geográficas (LongLat)
# a coordenadas planas (UTM)
datos2 <- as.matrix(data.frame(x=as.numeric(dt2$lat),
y=as.numeric(dt2$long)))
head(datos2)
# Chunk 8
x1.2 <- as.numeric(dt2$tmin)
x2.2 <- as.numeric(dt2$tmax)
x3.2 <- as.numeric(dt2$elev)
df2 <- cbind(datos2, x1.2,x2.2,x3.2)
df2 <- data.frame(df2)
colnames(df2)<-c("X","Y", "Temp min", "Temp max", "elev")
geo_temp.max2 <- as.geodata(df2, coords = 1:2, data.col = 4, borders=TRUE)
geo_temp.max2$borderland<- borderland
datos2.sp <- df2
coordinates(datos2.sp) <- ~X+Y
# Chunk 9
plot(geo_temp.max2, lowess=TRUE)
# Chunk 10
plot(geo_temp.max2, lowess=TRUE, trend = "2nd")
# Chunk 11
qqnorm(df2$`Temp max`, pch = 19)
qqline(df2$`Temp max`)
# Chunk 12
shapiro.test(df2$`Temp max`)
# Chunk 13
dt <- dt0 %>% filter(date == "2019-03-10") %>% na.omit()
# Conversión de coordenadas geográficas (LongLat)
# a coordenadas planas (UTM)
datos <- as.matrix(data.frame(x=as.numeric(dt$lat),
y=as.numeric(dt$long)))
x1 <- as.numeric(dt$tmin)
x2 <- as.numeric(dt$tmax)
x3 <- as.numeric(dt$elev)
df <- cbind(datos, x1,x2,x3)
df <- data.frame(df)
colnames(df)<-c("X","Y", "Temp min", "Temp max", "elev")
geo_temp.max <- as.geodata(df, coords = 1:2, data.col = 4, borders=TRUE)
geo_temp.max$borderland<- borderland
datos.sp <- df
coordinates(datos.sp) <- ~X+Y
plot(geo_temp.max, lowess=TRUE)
# Chunk 14
qqnorm(df$`Temp max`)
qqline(df$`Temp max`)
shapiro.test(df$`Temp max`)
# Chunk 15
distancia1 <- dist(df[,1:2], diag=TRUE, upper=TRUE)
dif.temp1 <- dist(df[,4], diag=TRUE, upper=TRUE)^2
distancia2 <- dist(df2[,1:2], diag=TRUE, upper=TRUE)
dif.temp2 <- dist(df2[,4], diag=TRUE, upper=TRUE)^2
# Chunk 16
datosmatriz1 <- data.frame(dif.prof=dif.temp1[lower.tri(dif.temp1)],
distancia1=distancia1[lower.tri(distancia1)])
datosmatriz2 <- data.frame(dif.prof=dif.temp2[lower.tri(dif.temp2)],
distancia2=distancia2[lower.tri(distancia2)])
par(mfrow = c(1,2))
# (2019-03-10) [Normal]
plot(x = datosmatriz1$distancia1, y = datosmatriz1$dif.prof,
main = "2019-03-10 (Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia1, data = datosmatriz1), lwd = 2,
col = "red")
# (2019-01-10) [NO Normal]
plot(x = datosmatriz2$distancia2, y = datosmatriz2$dif.prof,
main = "2019-01-10 (No Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia2, data = datosmatriz2), lwd = 2,
col = "red")
# Chunk 17
mantel(distancia1, dif.temp1, na.rm = T)
# Chunk 18
mantel.rtest(distancia1, dif.temp1, nrepet=999)
# Chunk 19
mantel(distancia2, dif.temp2)
mantel.rtest(distancia2, dif.temp2)
# Chunk 20
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2; dm
# Chunk 21
vario1 <- variog(geo_temp.max, option = "cloud")
vario2 <- variog(geo_temp.max, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste\ncon regla empírica")
# Chunk 22
bin1 <- variog(geo_temp.max,option="bin")
bin2 <- variog(geo_temp.max,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste\ncon regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste\ncon regla empírica")
# Chunk 23
par(mfrow = c(1,1))
sm.variogram(datos.sp@coords, datos.sp@data$`Temp max`,model="independent",
ylim = c(0,70))
# Chunk 24
ini.vals1 <- c(17.79,0.7)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 0.03)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern)
# Chunk 25
eyefit(bin1) # exponencial siga 17.34 phi 1.48 tausq 2.17 range 4.4336
# Chunk 26
eyefit(bin1)
# Chunk 27
eyefit(bin1)
# Chunk 28
eyefit(bin1)
# Chunk 29
eyefit(bin1)
source("~/.active-rstudio-document", echo=TRUE)
