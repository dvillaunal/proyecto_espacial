resumen <- summary(geo_temp.max.utm)
distancia <- resumen$distances.summary
dm <- distancia[2]/2; dm
# Chunk 20
vario1 <- variog(geo_temp.max.utm, option = "cloud")
vario2 <- variog(geo_temp.max.utm, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste\ncon regla empírica")
# Chunk 21
bin1 <- variog(geo_temp.max.utm,option="bin")
bin2 <- variog(geo_temp.max,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste\ncon regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste\ncon regla empírica")
# Chunk 22
par(mfrow = c(1,1))
sm.variogram(datos.sp.utm@coords,
datos.sp.utm@data$`Temp max`,model="independent",
ylim = c(0,70))
# Chunk 23
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 0.03)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
# Creación de nuevas bases de datos con la libreria sp
geo_df <- rename(df, Temperature = `Temp max`)
geo_df$Temperature %<>% as.double()
geo_df <- as.geodata(geo_df, coords = 1:2, var = 4)
# coordinates(geo_df) <- ~X+Y
# proj4string(geo_df) <- CRS("+init=epsg:9377")
# Creación de las geometrías
poly <- Polygon(border_ant)
polys <- Polygons(list(poly), 1)
sps <- SpatialPolygons(list(polys))
# Creación de los datos espaciales
sp_df <- SpatialPolygonsDataFrame(sps, data.frame(Temperature = 35.7))
# Creación de la maya con 10.000 puntos
grd <- makegrid(sp_df, n = 10000)
grd.ko <- as.data.frame(grd)
colnames(grd) <- c('X','Y')
grd_pts <- SpatialPoints(coords = grd,
proj4string=CRS(proj4string(sp_df)))
grd_pts_in <- grd_pts[sp_df, ]
gdf <- as.data.frame(coordinates(grd_pts_in))
ggplot(gdf) +
geom_point(aes(x=X,y=Y))+
labs(title = "Malla de 10k puntos",
subtitle = "Para hacer interpolación espacial")+
theme_bw()
# Nueva regla empirica
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2
# Ajustes del variograma con un modelo Matern
variog2 <- variogram(Temperature ~ X+Y, data = geo_df, cutoff=dm)
# Creación de nuevas bases de datos con la libreria sp
geo_df <- rename(df, Temperature = `Temp max`)
geo_df$Temperature %<>% as.double()
geo_df2 <- geo_df
geo_df <- as.geodata(geo_df, coords = 1:2, var = 4)
coordinates(geo_df2) <- ~X+Y
proj4string(geo_df2) <- CRS("+init=epsg:9377")
# Creación de las geometrías
poly <- Polygon(border_ant)
polys <- Polygons(list(poly), 1)
sps <- SpatialPolygons(list(polys))
# Creación de los datos espaciales
sp_df <- SpatialPolygonsDataFrame(sps, data.frame(Temperature = 35.7))
# Creación de la maya con 10.000 puntos
grd <- makegrid(sp_df, n = 10000)
grd.ko <- as.data.frame(grd)
colnames(grd) <- c('X','Y')
grd_pts <- SpatialPoints(coords = grd,
proj4string=CRS(proj4string(sp_df)))
grd_pts_in <- grd_pts[sp_df, ]
gdf <- as.data.frame(coordinates(grd_pts_in))
# Nueva regla empirica
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2
# Ajustes del variograma con un modelo Matern
variog2 <- variogram(Temperature ~ X+Y, data = geo_df2, cutoff=dm)
mod_ols <- fit.variogram(variog2,
model = vgm(psill=10.3, 'Mat',
range = 1.68, kappa = 0.5),
fit.method = 6)
coordinates(geo_df) <- ~X+Y
# Kriging Ordinario en GeoR
pred_krig <- krige.conv(geo_df, locations = grd.ko,
borders = border_ant@coords,
krige = krige.control(nugget = 3.8,
cov.pars = c(sigmasq = 10.3,
phi = 1.68)))
geo_df
ggplot(antioquia) +
geom_sf() +
geom_sf(data = geo_df2, aes(col = Temperature))+
theme_bw()
ggplot(border_ant) +
geom_sf() +
geom_sf(data = geo_df2, aes(col = Temperature))+
theme_bw()
ggplot(border_ant@coords) +
geom_sf() +
geom_sf(data = geo_df2, aes(col = Temperature))+
theme_bw()
ggplot() +
geom_sf() +
geom_sf(data = geo_df2, aes(col = Temperature))+
theme_bw()
geo_df2
ggplot() +
geom_sf() +
geom_sf(data = geo_df2$Temperature, aes(col = Temperature))+
theme_bw()
geo_df2
# Creación de nuevas bases de datos con la libreria sp
geo_df <- rename(df, Temperature = `Temp max`)
geo_df$Temperature %<>% as.double()
geo_df2 <- geo_df
geo_df <- as.geodata(geo_df, coords = 1:2, var = 4)
coordinates(geo_df2) <- ~X+Y
proj4string(geo_df2) <- CRS("+init=epsg:4326")
geo_df2
ggplot() +
geom_sf(data = geo_df2, aes(col = Temperature))
ggplot(antioquia) +
geom_sf(data = geo_df2, aes(col = Temperature))
geo_df2
antioquia
ggplot() +
geom_sf(data = antioquia)+
geom_point(data = geo_df2,
aes(x = X, y = Y),
alpha = .3,
color = "orange")
ggplot() +
geom_sf(data = antioquia)+
geom_point(data = geo_df,
aes(x = X, y = Y),
alpha = .3,
color = "orange")
geo_df2
antioquia$geometry
antioquia
proj4string(antioquia) <- CRS("+init=epsg:4326")
dm
# Chunk 1
library(geoR); library(gstat) ;library(sf);library(raster)
library(rgdal)
library(vegan)
library(ade4)
library(tidyverse)
require(magrittr)
library(tmaptools) # Geocodificación y visualización
library(tidygeocoder) # Geocodificación
library(leaflet) # Visualización
library(sm)
require(gstat)
require(MASS)
require(gt)
set.seed(1231)
# Chunk 2
col <- st_read("databases/MGN_DPTO_POLITICO.shp") # Archivo de interés
plot(col$geometry)
antioquia <- col[14,"geometry"]
border_ant <- st_coordinates(antioquia) #matriz del sistema coordenadas
border_ant <- as.data.frame(border_ant[,1:2])
# Chunk 3
dt0 <- read_csv("databases/temperature.csv")
head(dt0)
# Chunk 4
dt2 <- dt0 %>% filter(date == "2019-01-10") %>% na.omit()
dt2 <- dt2[-c(12, 10, 11, 17, 28, 31, 29, 4, 1),]
# Chunk 5
leaflet(antioquia) %>%
addPolygons(color = "red") %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addMarkers(lng = dt2$long, lat = dt2$lat,
popup = paste0("[x = ", dt2$long,", y = ", dt2$lat, "]"))
# Chunk 6
datos2 <- as.matrix(data.frame(x=as.numeric(dt2$long),
y=as.numeric(dt2$lat)))
# Chunk 7
x1.2 <- as.numeric(dt2$tmin)
x2.2 <- as.numeric(dt2$tmax)
x3.2 <- as.numeric(dt2$elev)
df2 <- cbind(datos2, x1.2,x2.2,x3.2)
df2 <- data.frame(df2)
colnames(df2)<-c("X","Y", "Temp min", "Temp max", "elev")
geo_temp.max2 <- as.geodata(df2, coords = 1:2, data.col = 4, borders=TRUE)
geo_temp.max2$borders <- border_ant
datos2.sp <- df2
coordinates(datos2.sp) <- ~X+Y
# Chunk 8
points(geo_temp.max2, col = "blue3", pt.divide = "equal",
xlab = "Longitud", ylab = "Latitud")
plot(geo_temp.max2, lowess=TRUE)
# Chunk 9
plot(geo_temp.max2, lowess=TRUE, trend = "2nd")
# Chunk 10
qqnorm(df2$`Temp max`, pch = 19)
qqline(df2$`Temp max`)
# Chunk 11
shapiro.test(df2$`Temp max`)
# Chunk 12
dt <- dt0 %>% filter(date == "2019-03-10") %>% na.omit()
dt <- dt[-c(12, 10, 11, 17, 28, 31, 29, 4, 1),]
datos <- as.matrix(data.frame(x=as.numeric(dt$long),
y=as.numeric(dt$lat)))
x1 <- as.numeric(dt$tmin)
x2 <- as.numeric(dt$tmax)
x3 <- as.numeric(dt$elev)
df <- cbind(datos, x1,x2,x3)
df <- data.frame(df)
colnames(df)<-c("X","Y", "Temp min", "Temp max", "elev")
geo_temp.max <- as.geodata(df, coords = 1:2, data.col = 4, borders=TRUE)
geo_temp.max$borders <- border_ant
plot(geo_temp.max, lowess=TRUE)
# Conversión de coordenadas geográficas (LongLat)
# a coordenadas planas (UTM)
datos.sp <- df
coordinates(datos.sp) <- ~X+Y
proj4string(datos.sp) <- CRS("+init=epsg:4326")
datos.sp.utm <- spTransform(datos.sp, CRS("+init=epsg:9377"))
coordinates(border_ant) <- ~X+Y
proj4string(border_ant) <- CRS("+init=epsg:4326")
border_ant.utm <- spTransform(border_ant, CRS("+init=epsg:9377"))
geo_temp.max.utm <- datos.sp.utm %>% as.data.frame() %>%  as.geodata(., coords = 4:5, data.col = 2, borders=TRUE)
geo_temp.max.utm$borders <- border_ant.utm %>% as.data.frame()
plot(geo_temp.max.utm, lowess=TRUE)
# Chunk 13
qqnorm(df$`Temp max`, pch = 19)
qqline(df$`Temp max`)
shapiro.test(df$`Temp max`)
# Chunk 14
df.sp.utm <- datos.sp.utm %>% as.data.frame()
distancia1 <- dist(df.sp.utm[,4:5], diag=TRUE, upper=TRUE)
dif.temp1 <- dist(df.sp.utm[,2], diag=TRUE, upper=TRUE)^2
distancia2 <- dist(df2[,1:2], diag=TRUE, upper=TRUE)
dif.temp2 <- dist(df2[,4], diag=TRUE, upper=TRUE)^2
# Chunk 15
datosmatriz1 <- data.frame(dif.prof=dif.temp1[lower.tri(dif.temp1)],
distancia1=distancia1[lower.tri(distancia1)])
datosmatriz2 <- data.frame(dif.prof=dif.temp2[lower.tri(dif.temp2)],
distancia2=distancia2[lower.tri(distancia2)])
par(mfrow = c(1,2))
# (2019-03-10) [Normal]
plot(x = datosmatriz1$distancia1, y = datosmatriz1$dif.prof,
main = "2019-03-10 (Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m)")
abline(lm(dif.prof~distancia1, data = datosmatriz1), lwd = 2,
col = "red")
# (2019-01-10) [NO Normal]
plot(x = datosmatriz2$distancia2, y = datosmatriz2$dif.prof,
main = "2019-01-10 (No Normal)", ylab = "Diferencia en temperatura",
xlab = "Distancia (m/100k)")
abline(lm(dif.prof~distancia2, data = datosmatriz2), lwd = 2,
col = "red")
# Chunk 16
mantel(distancia1, dif.temp1, na.rm = T)
# Chunk 17
mantel.rtest(distancia1, dif.temp1, nrepet=999)
# Chunk 18
mantel(distancia2, dif.temp2)
mantel.rtest(distancia2, dif.temp2)
# Chunk 19
resumen <- summary(geo_temp.max.utm)
distancia <- resumen$distances.summary
dm <- distancia[2]/2; dm
# Chunk 20
vario1 <- variog(geo_temp.max.utm, option = "cloud")
vario2 <- variog(geo_temp.max.utm, option = "cloud", max.dist = dm)
par(mfrow=c(1,2))
plot(vario1, pch=21, bg="blue", lwd="black",
main="Variograma sin ajuste\ncon regla empírica")
plot(vario2, pch=21, bg="red", lwd="black",
main="Variograma ajuste\ncon regla empírica")
dm
dm
bin1 <- variog(geo_temp.max.utm,option="bin")
bin2 <- variog(geo_temp.max.utm,option="bin",max.dist=dm)
par(mfrow=c(1,2))
plot(bin1, pch=21, bg="blue", lwd="black",
main="Semivariograma sin ajuste\ncon regla empírica")
plot(bin2, pch=21, bg="red", lwd="black",
main="Semivariograma ajuste\ncon regla empírica")
par(mfrow = c(1,1))
sm.variogram(datos.sp.utm@coords,
datos.sp.utm@data$`Temp max`,model="independent",
ylim = c(0,70))
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 0.03)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 3.8)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 3.8)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =F,
weights = "npairs", min="optim", nugget = 3.8)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 3.8)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim")
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 3.8)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 3.2)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 3.0)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 2.5)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 2.5)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 2.0)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 0.1)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 0.03)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
ini.vals1 <- c(10.5,168500)
fit_matern <- variofit(vario = bin2,ini.cov.pars = ini.vals1, fix.nugget =T,
weights = "npairs", min="optim", nugget = 0)
plot(bin2, pch=21, bg="blue", lwd="black",
main="Semivariograma con ajuste Matern")
lines(fit_matern, lwd = 2, col = "red")
# Creación de nuevas bases de datos con la libreria sp
geo_df <- rename(df, Temperature = `Temp max`)
geo_df$Temperature %<>% as.double()
geo_df2 <- geo_df
geo_df <- as.geodata(geo_df, coords = 1:2, var = 4)
coordinates(geo_df2) <- ~X+Y
proj4string(geo_df2) <- CRS("+init=epsg:4326")
# Creación de las geometrías
poly <- Polygon(border_ant)
polys <- Polygons(list(poly), 1)
sps <- SpatialPolygons(list(polys))
# Creación de los datos espaciales
sp_df <- SpatialPolygonsDataFrame(sps, data.frame(Temperature = 35.7))
# Creación de la maya con 10.000 puntos
grd <- makegrid(sp_df, n = 10000)
grd.ko <- as.data.frame(grd)
colnames(grd) <- c('X','Y')
grd_pts <- SpatialPoints(coords = grd,
proj4string=CRS(proj4string(sp_df)))
grd_pts_in <- grd_pts[sp_df, ]
gdf <- as.data.frame(coordinates(grd_pts_in))
ggplot(gdf) +
geom_point(aes(x=X,y=Y))+
labs(title = "Malla de 10k puntos",
subtitle = "Para hacer interpolación espacial")+
theme_bw()
# Nueva regla empirica
resumen <- summary(geo_temp.max)
distancia <- resumen$distances.summary
dm <- distancia[2]/2
# Ajustes del variograma con un modelo Matern
variog2 <- variogram(Temperature ~ X+Y, data = geo_df2, cutoff=dm)
mod_ols <- fit.variogram(variog2,
model = vgm(psill=10.3, 'Mat',
range = 1.68, kappa = 0.5),
fit.method = 6)
dm
# Ajustes del variograma con un modelo Matern
variog2 <- variogram(Temperature ~ X+Y, data = geo_df2, cutoff=dm)
mod_ols <- fit.variogram(variog2,
model = vgm(psill=10.3, 'Mat',
range = 1.68, kappa = 0.5),
fit.method = 6)
variog2
variogram(Temperature ~ X+Y, data = geo_df2, cutoff=dm)
geo_df2
dm
plot(geo_df2)
# Creación de nuevas bases de datos con la libreria sp
geo_df <- rename(df, Temperature = `Temp max`)
geo_df$Temperature %<>% as.double()
geo_df2 <- geo_df
coordinates(geo_df2) <- ~X+Y
geo_df <- as.geodata(geo_df, coords = 1:2, var = 4)
# Ajustes del variograma con un modelo Matern
variog2 <- variogram(Temperature ~ X+Y, data = geo_df2, cutoff=dm)
mod_ols <- fit.variogram(variog2,
model = vgm(psill=10.3, 'Mat',
range = 1.68, kappa = 0.5),
fit.method = 6)
# Kriging Ordinario en GeoR
pred_krig <- krige.conv(geo_df, locations = grd.ko,
borders = border_ant@coords,
krige = krige.control(nugget = 3.8,
cov.pars = c(sigmasq = 10.3,
phi = 1.68)))
plot(border_ant@coords, main = "Kriging ordinario",
xlab = "Longitud", ylab = "Latitud", pch = '-')
image(pred_krig, add=TRUE)
contour(pred_krig, add= TRUE, drawlabels = TRUE)
geo_df2
geo_df
ggplot(geo_df2, aes(X,Y))
ggplot(geo_df2@coords, aes(X,Y))
geo_df2@coords
geo_df2@coords %>% as.data.frame
plot(geo_temp.max)
plot(geo_temp.max, trend = "1st")
plot(geo_temp.max, trend = "2nd")
plot(geo_temp.max, trend = "2nd", loess = T)
plot(geo_temp.max, trend = "2nd", lowess = T)
geo_temp.max
geo_temp.max %>% class()
ggplot(geo_temp.max)+
geom_sf()
geo_temp.max %>% as_Spatial()
geo_temp.max %>% as_sf()
geo_temp.max %>% as(.,'Spatial')
geo_temp.max %>% st_as_sf(., crs = 4326)
geo_temp.max$coords %>% st_as_sf(., crs = 4326)
geo_temp.max$coords
geo_temp.max$coords %>% st_as_sf(., crs = 4326)
geo_temp.max$coords %>% as.data.frame() %>% st_as_sf(., crs = 4326)
geo_temp.max$coords %>% as.data.frame() %>% st_as_sfc(., crs = 4326)
geo_temp.max$coords%>% st_as_sfc(., crs = 4326)
geo_temp.max$border
ggplot(data.frame(cbind(geo_temp.max$coords,
Temp.Max = geo_temp.max$data)))+
geom_point(aes(X,Y, color = Temp.Max), size = 2)+
coord_fixed(ratio =1)+
scale_color_gradient(low = 'blue', high = 'orange')+
geom_path(data = data.frame(geo_temp.max$border),
aes(X,Y))+theme_bw()
ggplot(data.frame(cbind(geo_temp.max$coords,
Temp.Max = geo_temp.max$data)))+
geom_point(aes(X,Y, color = Temp.Max), size = 2)+
coord_fixed(ratio =1)+
scale_color_gradient(low = 'blue', high = 'orange')+
geom_path(data = data.frame(geo_temp.max$border),
aes(X,Y))+
labs(title = "Datos de la Temperatura maxima en Antioquia",
subtitle = "Con su escala de color en grados celsius (C°)")+
theme_bw()
ggplot(data.frame(cbind(geo_temp.max$coords,
Temp.Max = geo_temp.max$data)))+
geom_point(aes(X,Y, color = Temp.Max), size = 2)+
coord_fixed(ratio =1)+
scale_color_gradient(low = 'blue', high = 'orange')+
geom_path(data = data.frame(geo_temp.max$border),
aes(X,Y))+
labs(title = "Datos de la temperatura maxima en Antioquia",
subtitle = "Con su escala de color en grados celsius (C°)")+
theme_bw()
